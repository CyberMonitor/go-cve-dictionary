package commands

import (
	"flag"
	"os"
	"strconv"
	"time"

	"github.com/google/subcommands"
	c "github.com/kotakanbe/go-cve-dictionary/config"
	db "github.com/kotakanbe/go-cve-dictionary/db"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/kotakanbe/go-cve-dictionary/nvd"
	"golang.org/x/net/context"
)

// FetchNvdCmd is Subcommand for fetch Nvd information.
type FetchNvdCmd struct {
	debug    bool
	debugSQL bool

	dbpath string

	last2Y bool
	years  bool
}

// Name return subcommand name
func (*FetchNvdCmd) Name() string { return "fetchnvd" }

// Synopsis return synopsis
func (*FetchNvdCmd) Synopsis() string { return "Fetch Vulnerability dictionary from NVD" }

// Usage return usage
func (*FetchNvdCmd) Usage() string {
	return `fetchnvd:
	fetchnvd
		[-last2y]
		[-years] 2015 2016 ...
		[-dbpath=/path/to/cve.sqlite3]
		[-debug]
		[-debug-sql]

For the first time, run the blow command to fetch data for entire period. (It takes about 10 minutes)
   $ for i in {2002..2016}; do go-cve-dictionary fetchnvd -years $i; done

`
}

// SetFlags set flag
func (p *FetchNvdCmd) SetFlags(f *flag.FlagSet) {
	f.BoolVar(&p.debug, "debug", false,
		"debug mode")
	f.BoolVar(&p.debugSQL, "debug-sql", false,
		"SQL debug mode")

	pwd := os.Getenv("PWD")
	f.StringVar(&p.dbpath, "dbpath", pwd+"/cve.sqlite3", "/path/to/sqlite3")

	f.BoolVar(&p.last2Y, "last2y", false,
		"Refresh NVD data in the last two years.")

	f.BoolVar(&p.years, "years", false,
		"Refresh NVD data of specific years.")
}

// Execute execute
func (p *FetchNvdCmd) Execute(_ context.Context, f *flag.FlagSet, _ ...interface{}) subcommands.ExitStatus {

	c.Conf.Debug = p.debug
	c.Conf.DebugSQL = p.debugSQL

	if c.Conf.Debug {
		log.SetDebug()
	}

	c.Conf.DBPath = p.dbpath

	if !c.Conf.Validate() {
		return subcommands.ExitUsageError
	}

	years := []int{}
	thisYear := time.Now().Year()

	switch {
	case p.last2Y:
		for i := 0; i < 2; i++ {
			years = append(years, thisYear-i)
		}
	case p.years:
		if len(f.Args()) == 0 {
			log.Errorf("Specify years to fetch (from 2002 to %d)", thisYear)
			return subcommands.ExitUsageError
		}
		for _, arg := range f.Args() {
			year, err := strconv.Atoi(arg)
			if err != nil || year < 2002 || time.Now().Year() < year {
				log.Errorf("Specify years to fetch (from 2002 to %d), arg: %s", thisYear, arg)
				return subcommands.ExitUsageError
			}
			found := false
			for _, y := range years {
				if y == year {
					found = true
					break
				}
			}
			if !found {
				years = append(years, year)
			}
		}
	default:
		log.Errorf("specify -last2y or -years")
		return subcommands.ExitUsageError
	}

	entries, err := nvd.FetchFiles(years)
	if err != nil {
		log.Error(err)
		return subcommands.ExitFailure
	}
	log.Infof("Fetched %d CVEs", len(entries))

	log.Infof("Opening DB. datafile: %s", c.Conf.DBPath)
	if err := db.OpenDB(); err != nil {
		log.Error(err)
		return subcommands.ExitFailure
	}

	log.Info("Migrating DB")
	if err := db.MigrateDB(); err != nil {
		log.Error(err)
		return subcommands.ExitFailure
	}

	if err := db.InsertNvd(entries); err != nil {
		log.Errorf("Failed to inert. dbpath: %s, err: %s",
			c.Conf.DBPath, err)
		return subcommands.ExitFailure
	}

	return subcommands.ExitSuccess
}
