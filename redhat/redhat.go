package redhat

import (
	"fmt"
	"net/http"
	"strings"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	"github.com/parnurzeal/gorequest"
)

// CveDates cve dates
// https://www.redhat.com/security/data/metrics/cve_dates.txt
// ex.
// CVE-2016-9589 impact=moderate,public=20170322,reported=20161214,source=customer,cvss2=5.0/AV:N/AC:L/Au:N/C:N/I:N/A:P,cvss3=7.5/CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
type CveDates struct {
	CveID    string
	Impact   string
	Public   string
	Reported string
	Source   string
	Cvss2    string
	Cvss3    string
}

const url = "https://www.redhat.com/security/data/metrics/cve_dates.txt"

// FetchFile fetches file
func FetchFile() (contents string, err error) {
	var body string
	var errs []error
	var resp *http.Response

	resp, body, errs = gorequest.New().Proxy(c.Conf.HTTPProxy).Get(url).End()
	if len(errs) > 0 || resp == nil || resp.StatusCode != 200 {
		return "", fmt.Errorf(
			"HTTP error. errs: %v, url: %s", errs, url)
	}
	return string(body), nil
}

var keys = []string{"impact", "public", "reported", "source", "cvss2", "cvss3"}

// Parse parses the contents
func Parse(contents string) (cves []CveDates) {
	for _, line := range strings.Split(contents, "\n") {
		if !strings.HasPrefix(line, "CVE-") {
			continue
		}
		f := strings.Fields(line)
		cve := CveDates{
			CveID: f[0],
		}
		if 1 < len(f) {
			for _, kv := range strings.Split(f[1], ",") {
				ss := strings.Split(kv, "=")
				switch ss[0] {
				case "impact":
					cve.Impact = ss[1]
				case "public":
					cve.Public = ss[1]
				case "reported":
					cve.Reported = ss[1]
				case "source":
					cve.Source = ss[1]
				case "cvss2":
					cve.Cvss2 = ss[1]
				case "cvss3":
					cve.Cvss3 = ss[1]
				}
			}
		}
		cves = append(cves, cve)
	}
	return
}
