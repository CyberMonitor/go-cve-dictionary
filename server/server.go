package server

import (
	"fmt"
	"net/http"

	c "github.com/kotakanbe/go-cve-dictionary/config"
	db "github.com/kotakanbe/go-cve-dictionary/db"
	log "github.com/kotakanbe/go-cve-dictionary/log"
	"github.com/labstack/echo"
	mw "github.com/labstack/echo/middleware"
)

// Start starts CVE dictionary HTTP Server.
func Start() error {

	e := echo.New()
	e.SetDebug(c.Conf.Debug)

	// Middleware
	e.Use(mw.Logger())
	e.Use(mw.Recover())

	// Routes
	e.Get("/health", health)
	e.Get("/cves/:id", getCve)
	e.Post("/cpes", getCveByCpeName)

	bindURL := fmt.Sprintf("%s:%s", c.Conf.Bind, c.Conf.Port)
	log.Infof("Listening on %s", bindURL)

	e.Run(bindURL)
	return nil
}

func health(c *echo.Context) error {
	return c.JSON(http.StatusOK, "")
}

func getCve(c *echo.Context) error {
	cveid := c.Param("id")
	cveDetail := db.Get(cveid)
	return c.JSON(http.StatusOK, cveDetail)
}

type cpeName struct {
	Name string `form:"name"`
}

func getCveByCpeName(c *echo.Context) error {
	cpe := cpeName{}
	err := c.Bind(&cpe)
	if err != nil {
		return err
	}
	cveDetails := db.GetByCpeName(cpe.Name)
	return c.JSON(http.StatusOK, cveDetails)
}
